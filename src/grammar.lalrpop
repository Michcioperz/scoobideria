use rand::prelude::*;
use std::str::FromStr;
use std::convert::TryInto;

grammar;

PositiveInt: usize = r"[1-9][0-9]{0,5}" => usize::from_str(<>).unwrap();

Int: isize = {
  "+"? <i:PositiveInt> => i as isize,
  "-" <i:PositiveInt> => -(i as isize),
}

Roll: Vec<isize> = {
  <count:PositiveInt?> "d" <die:PositiveInt> => rand::distributions::Uniform::new_inclusive(1, die).sample_iter(rand::thread_rng()).take(count.unwrap_or(1)).map(|i| i as isize).collect(),
  <count:PositiveInt?> "doo" => {
    let (l, r) = rand::distributions::Uniform::new_inclusive(1, 6).sample_iter(rand::thread_rng()).take(count.unwrap_or(1) * 2).enumerate().partition::<Vec<_>,_>(|(i, _)| i % 2 == 0);
    l.into_iter().zip(r.into_iter()).map(|((_, l), (_, r))| l + r).collect()
  },
  <r:Roll> "+" <i:Int> => r.into_iter().map(|x| x + i).collect(),
  <r:Roll> "-" <i:Int> => r.into_iter().map(|x| x - i).collect(),
  <r:Roll> "*" <i:Int> => r.into_iter().map(|x| x * i).collect(),
  <r:Roll> "/" <i:Int> => r.into_iter().map(|x| x / i).collect(),
  <r:Roll> "%" <i:Int> => r.into_iter().map(|x| x % i).collect(),
  <r:Roll> "^" <i:Int> => r.into_iter().map(|x| x.pow(i.try_into().unwrap_or(0))).collect(),
  <r:Roll> "sum" => vec![r.into_iter().sum()],
  <r:Roll> "min" => vec![r.into_iter().min().unwrap_or(0)],
  <r:Roll> "max" => vec![r.into_iter().max().unwrap_or(0)],
  <r:Roll> "count" => vec![r.len() as isize],
  <r:Roll> "sort" => { let mut r = r; r.sort_unstable(); r },
  <r:Roll> "rev" => r.into_iter().rev().collect(),
  <r:Roll> ">" <i:Int> => r.into_iter().filter(|x| *x > i).collect(),
  <r:Roll> ">=" <i:Int> => r.into_iter().filter(|x| *x >= i).collect(),
  <r:Roll> "<" <i:Int> => r.into_iter().filter(|x| *x < i).collect(),
  <r:Roll> "<=" <i:Int> => r.into_iter().filter(|x| *x <= i).collect(),
  <r:Roll> "==" <i:Int> => r.into_iter().filter(|x| *x == i).collect(),
  <r:Roll> "!=" <i:Int> => r.into_iter().filter(|x| *x != i).collect(),
  <r:Roll> "[" <i:PositiveInt?> ":" <n:PositiveInt?> "]" => r.into_iter().skip(i.unwrap_or(0)).take(n.unwrap_or(std::usize::MAX) - i.unwrap_or(0)).collect(),
};

pub RollResult: String = {
  <v:Roll> => {
    let sum: isize = v.iter().sum();
    let msg = format!("{} {:?}", sum, v);
    if msg.len() > 4096 {
      format!("{} [too long to list]", sum)
    } else {
      msg
    }
  },
  "mod" <i:Int> => {
    let count: usize = i.saturating_abs() as usize + 1;
    let (l, r) = rand::distributions::Uniform::new_inclusive(1, 6).sample_iter(rand::thread_rng()).take(count * 2).enumerate().partition::<Vec<_>,_>(|(i, _)| i % 2 == 0);
    let v: Vec<usize> = l.into_iter().zip(r.into_iter()).map(|((_, l), (_, r))| l + r).collect();
    let the_important_one = if i < 0 { v.iter().min().unwrap() } else { v.iter().max().unwrap() };
    let result = match *the_important_one {
      2..=5 => "failure",
      6..=7 => "partial success",
      8..=12 => "success",
      _ => unreachable!(),
    };
    format!("{}({}) {:?}", result, the_important_one, v)
  },
};

pub Query: String = {
  ("/roll" "@scoobideria_bot"?)? <r:RollResult> => r,
};
